"""
Indicates fields that define the type's identity (and its table's primary key).
If no fields have @id, but there is a @rid or @wkid field, the table is given a (hidden)
auto-increment ID that is used as its primary key. Therefore, @id is typically only used
for join tables. Implicitly immutable.
"""
directive @id on FIELD_DEFINITION

"""
Indicates that a field has an auto-incremented numeric value.
The field must have a type of ID! (recommended) or Int!.
For database compatibility, a type can have at most one @autoinc field.
@autoinc is generally used with @id.
Implicitly read-only.
"""
directive @autoinc on FIELD_DEFINITION

"""
Indicates that an input field is a reference to an @id field of an object of the given type.
"""
directive @idRef(
  """
  The type of object to which this input field refers.
  It must be an object or interface containing an @id field or a union of objects that do.
  """
  type: String!
  """
  The specific @id field to which this input field refers.
  Only required if the target object has more than one @id field.
  """
  field: String
) on INPUT_FIELD_DEFINITION

"""
Indicates a field containing a type's randomly-generated external identity string.
If the containing type also has a table ID assigned (assigned by `@sqlTable(id)`),
this ID string will be automatically prefixed with it. The prefix can be used (and
in such cases is required) if the type is referenced by interface or union.
Only one field per type may have a @rid or @wkid directive.
Implicitly read-only.
"""
directive @rid on FIELD_DEFINITION

"""
Indicates that an input field is a reference to a @rid field of an object of the given type.
"""
directive @ridRef(
  """
  The type of object to which this input field refers.
  It must be an object or interface containing a @rid field or a union of objects that do.
  """
  type: String!
) on INPUT_FIELD_DEFINITION

"""
Indicates a field containing a type's well-known external identity string.
Only one field per type may have a @rid or @wkid directive.
Implicitly immutable.
"""
directive @wkid(
  """The maximum length of the ID."""
  maxLength: Int!
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
Indicates that an input field is a reference to a @wkid field of an object of the given type.
"""
directive @wkidRef(
  """The maximum length of the ID."""
  maxLength: Int!
  """
  The type of object to which this input field refers.
  It must be an object or interface containing a @wkid field or a union of objects that do.
  """
  type: String!
) on INPUT_FIELD_DEFINITION

"""
For non-list fields, indicates the field has a unique value among all objects of the containing type.
For list fields, indicates that the list elements are unique within each list.
"""
directive @unique on FIELD_DEFINITION

"""Indicates the range constraints of a float field."""
directive @floatRange(
  """Minimum value."""
  min: Float
  """Maximum value."""
  max: Float
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Indicates the range constraints of an integer field."""
directive @intRange(
  """Minimum value."""
  min: Int
  """Maximum value."""
  max: Int
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Indicates the length constraints of a string field."""
directive @length(
  """Minimum valid length. Defaults to 1."""
  min: Int
  """Maximum valid length."""
  max: Int
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Provides a regular expression used to validate a string field."""
directive @regex(value: String!) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
Declares that the associated enum field indicates the concrete type of the containing interface for each object.
Every value of the enum must correspond to an object type that implements the containing interface.
Currently, correspondence is solely established by converting the enum value name to Pascal case.
Only one field per type may have a @typeDiscriminator directive.
A given enum type may only act as a discriminator for a single interface.
Implicitly read-only.
"""
directive @typeDiscriminator on FIELD_DEFINITION

"""Indicates that a Date or DateTime field always contains the creation date of the object. Implicitly read-only."""
directive @createdAt on FIELD_DEFINITION

"""Indicates that a Date or DateTime field always contains the last update of the object. Implicitly read-only."""
directive @updatedAt on FIELD_DEFINITION

"""
Indicates that objects of the containing type should be marked as deleted, rather than being
actually deleted, and that the associated field indicates whether the object has been deleted.
The field must have Boolean!, Date, or DateTime type. If the field is Boolean!, its value is
false if the object exists or true if it has been deleted. If the field is Date or DateTime,
its value is null if the object exists or the date/time at which it was deleted.
Only one field per type may have a @softDelete directive.
Implicitly read-only (except indirectly by delete mutation).
"""
directive @softDelete(
  """Whether to allow permanent/hard deletion, in addition to soft-deletion."""
  allowPermanent: Boolean
  """
  When deleting records that refer to the soft-deleted object, retain any references in objects of the given types.
  Normally, when hard-deleting an object, any references to it will be removed. If a reference is not nullable,
  the referring object will be deleted, which can result in a cascade of deletes.
  """
  retain: [String!]
) on FIELD_DEFINITION

"""Indicates that a field can be specified on creation, but not subsequently updated."""
directive @immutable on FIELD_DEFINITION

"""Indicates that a server-generated field that cannot be set on creation or update."""
directive @readonly on FIELD_DEFINITION

"""
Indicates that a field or type has a derived value that is not directly stored.
Implicitly read-only unless marked writable.
"""
directive @derived(writable: Boolean) on FIELD_DEFINITION | OBJECT

"""Provides the default value for a field. Non-null fields with a default value are optional on creation."""
directive @default(value: String!) on FIELD_DEFINITION

"""Indicates that a (non-null) field has a system-provided default value and can be optionally specified on creation."""
directive @generatedDefault on FIELD_DEFINITION

"""
Indicates that a field can be updated, but not specified on creation.
Useful for fields referencing other objects that can only be created after the containing object.
@useManyToMany fields tend to fall into either this category or @readonly.
If the field is non-null and no @default is specified, @generatedDefault is implied.
"""
directive @updateOnly on FIELD_DEFINITION

"""Indicates that ordering is not significant or maintained for a list field."""
directive @unordered on FIELD_DEFINITION

"""Provides control over the generated create mutation."""
directive @create (
  """Use the given input object type for the create argument."""
  input: String
  """Use the given input object type for create options."""
  options: String
  """Use the given output object type for the create result."""
  payload: String
) on OBJECT

"""Provides control over the generated update mutation."""
directive @update (
  """Use the given input object type for the update argument."""
  input: String
  """Use the given input object type for update options."""
  options: String
  """Use the given output object type for the update result."""
  payload: String
) on OBJECT

"""Provides control over the generated delete mutation."""
directive @delete (
  """Use the given input object type for the delete argument."""
  input: String
  """Use the given input object type for delete options."""
  options: String
  """Use the given output object type for the delete result."""
  payload: String
) on OBJECT

"""Provides control over the generated restore mutation."""
directive @restore (
  """Use the given input object type for the restore argument."""
  input: String
  """Use the given input object type for restore options."""
  options: String
  """Use the given output object type for the restore result."""
  payload: String
) on OBJECT

"""
Provides default configuration for any generated mutations.
Configuration specified in @create/@update/@delete/@restore will take precedence.
"""
directive @mutation (
  """Use the given input object type for mutation options."""
  options: String
) on OBJECT

"""
Specifies use of a nested input object (instead of an ID reference) for an object field in a generated create mutation.
(A nested object type without an identity is automatically created using a nested input object.)
Either `input` or `this` is required.
"""
directive @createNested (
  """Use the given type for the nested input object."""
  input: String
  """Use a generated nested input object with the given field implicitly set to the containing object."""
  this: String
  """A list of fields to exclude from the generated nested input object."""
  exclude: [String!]
) on FIELD_DEFINITION

"""
Specifies use of a nested input object (instead of an ID reference) for an object field in a generated update mutation.
(A nested object type without an identity is automatically updated using a nested input object.)
"""
directive @updateNested (
  """Use the given type for the nested input object."""
  input: String!
) on FIELD_DEFINITION

"""Provides control over the database column generated for a field."""
directive @sqlColumn(
  """Specifies the name of the database column used to store the field."""
  name: String
) on FIELD_DEFINITION

"""Defines a database index. Used by various @sql directives."""
input SqlKey {
  """Specifies the name of the index. The default name is all of the key column names separated by underscores."""
  name: String
  """Indicates whether the key must contain unique values."""
  unique: Boolean
  """Specifies the names of the columns comprising the key."""
  columns: [String!]!
}

"""
Provides control over the database table generated for an object or interface.
Interfaces do not generate a table unless this directive is specified.
"""
directive @sqlTable(
  """
  Specifies a string used to identify the table when a field references a polymorphic type (interface or union).
  Every object type of such an interface or union must have a unique ID specified using this directive.
  The string is also used as a prefix when constructing qualified external identifiers.
  """
  id: String
  """Specifies the name of the database table used to store the type."""
  name: String
  """Specifies a set of keys/indexes to create on the table."""
  keys: [SqlKey!]
) on OBJECT | INTERFACE

"""
Specifies the SQL data type to use for a scalar, enum, object, or field.
Custom scalar types must specify a SQL type on either the scalar definition or all fields of that type.
Enums default to a varchar with a maximum length of the longest enum value string.
For enums that specify an integer value with @sqlValue for each enum value, a suitable integer type is used.
Object types may use @sqlType to model complex SQL types such as spatial types.
Fields may use the directive to override the default type mapping, if any.
"""
directive @sqlType(
  """Specifies the SQL data type verbatim, such as "decimal(10, 2)"."""
  type: String!
  """Specifies the character set to use for a string field."""
  charset: String
  """Specifies the collation to use for a string field."""
  collate: String
  """Specifies the spatial reference system ID to use for a spatial field."""
  srid: Int
) on ENUM | FIELD_DEFINITION | OBJECT | SCALAR

"""
Specifies the value stored in the database for an enum value.
All enum values should be either unique integers or strings.
If this directive is not specified, the GraphQL name is used.
"""
directive @sqlValue(
  """Specifies a unique integer value used to represent this enum value."""
  int: Int
  """Specifies a unique string value used to represent this enum value."""
  string: String
) on ENUM_VALUE

enum SqlValueTransform {
  LOWERCASE
}

"""
Specifies how to derive the values stored in the database for an enum from the GraphQL names.
The effect is equivalent to specifying @sqlValue on each value with the transformed names.
If @sqlValue is explicitly specified for a value, it takes precedence.
"""
directive @sqlValues(
  """Specifies a transform to apply to the enum value names to obtain database values."""
  transform: SqlValueTransform
) on ENUM

"""
Explicitly indicates that a Connection field is a one-to-many relation and defines how the tables are joined.
A back-reference field can be specified indicating a field in the connection node type that refers back to the containing type.
For example, if type A has a connection field to nodes of type B and type B contains a field of type A called x,
the connection field in type A would specify `@oneToMany(backrefField: "x")`.
If more than one field is needed to specify the join, a back-reference join can be specified that lists pairs of fields
in each type that should be join. The first field in the pair is the one in the connection node type. If both fields have
the same name, a single string can be specified instead of a pair.
For example, if type C has a connection field to nodes of type D and needs to be joined where C.i = D.i and C.j = D.k,
the connection field in type C would specify `@oneToMany(backrefJoin: [["i"], ["k", "j"]])`.
Note that back-reference fields cannot have required/non-null arguments.
If no relation directive is used on a connection field, and the edge type contains no additional fields besides the node
and the cursor, the default behavior is to look for a single field in the connection node type of the type containing the
connection field with no required arguments. If such a field is found, it defines a one-to-many relation. Otherwise,
a many-to-many relation is used based on a new table with a name derived from the connection edge type.
One-to-many relation fields can only be specified on creation using @createNested and cannot be updated directly.
"""
directive @oneToMany(
  """
  Specifies the name of a field in the connection node type that refers back to the type containing the connection field.
  For example, if type A has a connection field to nodes of type B and type B contains a field of type A called x,
  the connection field in type A would specify `@oneToMany(backrefField: "x")`.
  """
  backrefField: String
  """
  Specifies the pairs of field names used to join the connection node type to the type containing the connection field.
  For example, if type C has a connection field to nodes of type D and needs to be joined where C.i = D.i and C.j = D.k,
  the connection field in type C would specify `@oneToMany(backrefJoin: [["i"], ["k", "j"]])`.
  """
  backrefJoin: [[String!]!]
) on FIELD_DEFINITION

"""
Explicitly indicates that a Connection field is a many-to-many relation based on a new join table.
Each such join table should have exactly one `@newManyToMany` directive.
"""
directive @newManyToMany(
  """
  Specifies the name of a new join table for this many-to-many relation.
  If not specified, the table name is derived from the connection edge type name.
  If multiple tables and/or multiple fields within a table refer to the same edge type,
  the table name with be prefixed with the table and/or field name.
  """
  tableName: String
  """
  Specifies a set of keys/indexes to create on the table.
  """
  tableKeys: [SqlKey!]
) on FIELD_DEFINITION

"""
Explicitly indicates that a Connection field is a many-to-many relation based on an existing join table.
The join table should be defined elsewhere (generally on the inverse relation) using a `@newManyToMany` directive.
"""
directive @useManyToMany(
  """
  Specifies the name of the existing join table for this many-to-many relation.
  """
  tableName: String!
) on FIELD_DEFINITION

"""
Identifies the user audiences for a type definition.
Only one of `include` or `exclude` should be specified.
If both are specified, `include` takes precedence.
"""
directive @audience(
  """
  Specifies the list of user audiences that are targeted by the annotated type. All other audiences are excluded.
  """
  include: [String!]
  """
  Specifies the list of user audiences that are excluded from the annotated type. All other audiences are included.
  """
  exclude: [String!]
) on SCALAR | OBJECT | FIELD_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
